@model AutomatedWarehouse.MVC.Models.View_models.GetReceiptDocumentsViewModel
<link rel="stylesheet" href="~/css/general-styles.css" />
<link rel="stylesheet" href="~/css/table.css" />
<link rel="stylesheet" href="~/css/receipt/get-receipt-documents.css" />

<h2 style="margin-bottom: 10px;">Поступления</h2>

<div class="filters-container">
    <div style="margin-right: 25px;">
        <label>Период</label><br />
        <div>
            <input class="full-input" type="date" value="@ViewBag.DateFrom" id="date-from-input" />
            -
            <input class="full-input" type="date" value="@ViewBag.DateUntil" id="date-until-input" />
        </div>
    </div>
    <div class="filter-container">
        <label>Номер поступления</label><br />
        <div id="receipt-numbers-open-modal-btn" class="open-filter-modal-div">
            <div id="selected-receipt-numbers-block" class="selected-receipt-numbers-div">Выберите</div>
            <div class="dropdown-sign">▼</div>
        </div>
        <div id="receipt-numbers-modal" class="filter-modal-block">
            @foreach (var receiptNumber in Model.ReceiptNumbers)
            {
                <div class="filter-modal-item" isSelected="false" onclick="selectReceiptNumber(this)">@receiptNumber</div>
            }
        </div>
        <select id="receipt-numbers-select" multiple style="display: none;">
            @foreach (var receiptNumber in Model.ReceiptNumbers)
            {
                <option value="@receiptNumber">@receiptNumber</option>
            }
        </select>
    </div>
    <div class="filter-container">
        <label>Ресурс</label><br />
        <div id="resources-open-modal-btn" class="open-filter-modal-div">
            <div id="selected-resources-block" class="selected-receipt-numbers-div">Выберите</div>
            <div class="dropdown-sign">▼</div>
        </div>
        <div id="resources-modal" class="filter-modal-block">
            @foreach (var resource in Model.AvailableResources)
            {
                <div class="filter-modal-item" isSelected="false" resourceId="@resource.Id" onclick="selectResource(this)">@resource.Name</div>
            }
        </div>
        <select id="resources-select" multiple style="display: none;">
            @foreach (var resource in Model.AvailableResources)
            {
                <option value="@resource.Id">@resource.Name</option>
            }
        </select>
    </div>
    <div class="filter-container" style="margin-right: 0;">
        <label>Единица измерения</label><br />
        <div id="units-open-modal-btn" class="open-filter-modal-div">
            <div id="selected-units-block" class="selected-receipt-numbers-div">Выберите</div>
            <div class="dropdown-sign">▼</div>
        </div>
        <div id="units-modal" class="filter-modal-block">
            @foreach (var unit in Model.AvailableMeasurementUnits)
            {
                <div class="filter-modal-item" isSelected="false" unitId="@unit.Id" onclick="selectUnit(this)">@unit.Name</div>
            }
        </div>
        <select id="units-select" multiple style="display: none;">
            @foreach (var unit in Model.AvailableMeasurementUnits)
            {
                <option value="@unit.Id">@unit.Name</option>
            }
        </select>
    </div>
</div>

<div style="margin-bottom: 15px;">
    <button id="apply-filters-btn" class="button blue-button" style="margin-right: 2px;">Применить</button>
    <a class="button green-button" asp-controller="Receipt" asp-action="AddReceipt" style="padding: 9px 10px 10px 10px;">Добавить</a>
</div>

<table id="receipt-documents-table">
    <tr>
        <th>Номер</th>
        <th>Дата</th>
        <th>Ресурс</th>
        <th>Единица измерения</th>
        <th>Количество</th>
    </tr>
    @foreach (var receiptDocument in Model.ReceiptDocuments)
    {
        @if (receiptDocument.ReceiptResources.Count == 0)
        {
            <tr>
                <td>@receiptDocument.ReceiptNumber</td>
                <td>@receiptDocument.ReceiptDate.ToString("dd.MM.yyyy")</td>
                <td></td>
                <td></td>
                <td>0</td>
            </tr>
        }
        else
        {
            @for (int i = 0; i < receiptDocument.ReceiptResources.Count; i++)
            {
                @if (i == 0)
                {
                    <tr>
                        <td rowspan="@receiptDocument.ReceiptResources.Count">@receiptDocument.ReceiptNumber</td>
                        <td rowspan="@receiptDocument.ReceiptResources.Count">@receiptDocument.ReceiptDate.ToString("dd.MM.yyyy")</td>
                        <td>@receiptDocument.ReceiptResources[i].Resource.Name</td>
                        <td>@receiptDocument.ReceiptResources[i].MeasurementUnit.Name</td>
                        <td>@receiptDocument.ReceiptResources[i].Quantity</td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td>@receiptDocument.ReceiptResources[i].Resource.Name</td>
                        <td>@receiptDocument.ReceiptResources[i].MeasurementUnit.Name</td>
                        <td>@receiptDocument.ReceiptResources[i].Quantity</td>
                    </tr>
                }
            }
        }
    }
</table>

<script>
    const receiptNumberOpenModalBtn = document.getElementById('receipt-numbers-open-modal-btn');
    const receiptNumbersModal = document.getElementById('receipt-numbers-modal');
    const selectedReceiptNumbersBlock = document.getElementById('selected-receipt-numbers-block');

    function calculateNumbersModalRect() {
        const rect = receiptNumberOpenModalBtn.getBoundingClientRect();
        receiptNumbersModal.style.top = rect.bottom + 2 + 'px';
        receiptNumbersModal.style.left = rect.left + 'px';
        receiptNumbersModal.style.width = rect.width + 'px';
    }

    receiptNumberOpenModalBtn.addEventListener('click', function() {
        if (receiptNumbersModal.style.display === 'none' || receiptNumbersModal.style.display === '') {
            receiptNumbersModal.style.display = 'block';
            calculateNumbersModalRect();
        } else {
            receiptNumbersModal.style.display = 'none';
        }
    });

    function selectReceiptNumber(element) {
        const option = document.querySelector(`option[value="${element.textContent}"]`);

        if (element.getAttribute('isSelected') === 'false') {
            element.setAttribute('isSelected', 'true');
            element.style.backgroundColor = '#ccc';

            option.selected = true;

            if (selectedReceiptNumbersBlock.childElementCount === 0) {
                selectedReceiptNumbersBlock.textContent = '';
            }

            const selectedReceiptNumberSpan = document.createElement('span');
            selectedReceiptNumberSpan.setAttribute('numberValue', element.textContent);
            selectedReceiptNumberSpan.textContent = element.textContent;
            selectedReceiptNumberSpan.style.backgroundColor = '#ccc';
            selectedReceiptNumberSpan.style.margin = '0 7px 5px 0';
            selectedReceiptNumberSpan.style.padding = '0 2px';
            selectedReceiptNumberSpan.style.borderRadius = '4px';
            selectedReceiptNumbersBlock.appendChild(selectedReceiptNumberSpan);
        }
        else if(element.getAttribute('isSelected') === 'true'){
            element.setAttribute('isSelected', 'false');
            element.style.backgroundColor = 'transparent';

            option.selected = false;

            const elementToDelete = document.querySelector(`span[numberValue="${element.textContent}"]`);
            elementToDelete.remove();

            if (selectedReceiptNumbersBlock.childElementCount === 0) {
                selectedReceiptNumbersBlock.textContent = 'Выберите';
            }
        }
        calculateNumbersModalRect();
    }
</script>

<script>
    const resourcesOpenModalBtn = document.getElementById('resources-open-modal-btn');
    const resourcesModal = document.getElementById('resources-modal');
    const selectedResourcesBlock = document.getElementById('selected-resources-block');

    function calculateResourcesModalRect() {
        const rect = resourcesOpenModalBtn.getBoundingClientRect();
        resourcesModal.style.top = rect.bottom + 2 + 'px';
        resourcesModal.style.left = rect.left + 'px';
        resourcesModal.style.width = rect.width + 'px';
    }

    resourcesOpenModalBtn.addEventListener('click', function() {
        if (resourcesModal.style.display === 'none' || resourcesModal.style.display === '') {
            resourcesModal.style.display = 'block';
            calculateResourcesModalRect();
        } else {
            resourcesModal.style.display = 'none';
        }
    });

    function selectResource(element) {
        const resourceId = element.getAttribute('resourceId');
        const option = document.querySelector(`option[value="${resourceId}"]`);

        if (element.getAttribute('isSelected') === 'false') {
            element.setAttribute('isSelected', 'true');
            element.style.backgroundColor ='#ccc';

            option.selected = true;

            if (selectedResourcesBlock.childElementCount === 0) {
                selectedResourcesBlock.textContent = '';
            }

            const selectedResourceSpan = document.createElement('span');
            selectedResourceSpan.setAttribute('resourceId', resourceId);
            selectedResourceSpan.textContent = element.textContent;
            selectedResourceSpan.style.backgroundColor = '#ccc';
            selectedResourceSpan.style.margin = '0 7px 5px 0';
            selectedResourceSpan.style.padding = '0 2px';
            selectedResourceSpan.style.borderRadius = '4px';
            selectedResourcesBlock.appendChild(selectedResourceSpan);
        }
        else if(element.getAttribute('isSelected') === 'true'){
            element.setAttribute('isSelected', 'false');
            element.style.backgroundColor = 'transparent';

            option.selected = false;

            const elementToDelete = document.querySelector(`span[resourceId="${resourceId}"]`);
            elementToDelete.remove();

            if (selectedResourcesBlock.childElementCount === 0) {
                selectedResourcesBlock.textContent = 'Выберите';
            }
        }
        calculateResourcesModalRect();
    }
</script>

<script>
    const unitsOpenModalBtn = document.getElementById('units-open-modal-btn');
    const unitsModal = document.getElementById('units-modal');
    const selectedUnitsBlock = document.getElementById('selected-units-block');

    function calculateUnitsModalRect() {
        const rect = unitsOpenModalBtn.getBoundingClientRect();
        unitsModal.style.top = rect.bottom + 2 + 'px';
        unitsModal.style.left = rect.left + 'px';
        unitsModal.style.width = rect.width + 'px';
    }

    unitsOpenModalBtn.addEventListener('click', function() {
        if (unitsModal.style.display === 'none' || unitsModal.style.display === '') {
            unitsModal.style.display = 'block';
            calculateUnitsModalRect();
        } else {
            unitsModal.style.display = 'none';
        }
    });

    function selectUnit(element) {
        const unitId = element.getAttribute('unitId');
        const option = document.querySelector(`option[value="${unitId}"]`);

        if (element.getAttribute('isSelected') === 'false') {
            element.setAttribute('isSelected', 'true');
            element.style.backgroundColor ='#ccc';

            option.selected = true;

            if (selectedUnitsBlock.childElementCount === 0) {
                selectedUnitsBlock.textContent = '';
            }

            const selectedUnitSpan = document.createElement('span');
            selectedUnitSpan.setAttribute('unitId', unitId);
            selectedUnitSpan.textContent = element.textContent;
            selectedUnitSpan.style.backgroundColor = '#ccc';
            selectedUnitSpan.style.margin = '0 7px 5px 0';
            selectedUnitSpan.style.padding = '0 2px';
            selectedUnitSpan.style.borderRadius = '4px';
            selectedUnitsBlock.appendChild(selectedUnitSpan);
        }
        else if(element.getAttribute('isSelected') === 'true'){
            element.setAttribute('isSelected', 'false');
            element.style.backgroundColor = 'transparent';

            option.selected = false;

            const elementToDelete = document.querySelector(`span[unitId="${unitId}"]`);
            elementToDelete.remove();

            if (selectedUnitsBlock.childElementCount === 0) {
                selectedUnitsBlock.textContent = 'Выберите';
            }
        }
        calculateUnitsModalRect();
    }
</script>

<script>
    const receiptDocumentsTable = document.getElementById('receipt-documents-table');
    const applyFiltersBtn = document.getElementById('apply-filters-btn');
    const receiptNumbersSelect = document.getElementById('receipt-numbers-select');
    const resourcesSelect = document.getElementById('resources-select');
    const unitsSelect = document.getElementById('units-select');

    applyFiltersBtn.addEventListener('click', async function() {
        receiptDocumentsTable.remove();

        const infoWaitingDataBlock = document.createElement('div');
        infoWaitingDataBlock.textContent = 'Загрузка данных';
        document.body.appendChild(infoWaitingDataBlock);

        const dateFrom = document.getElementById('date-from-input').value;
        const dateUntil = document.getElementById('date-until-input').value;
        const selectedReceiptNumbers = Array.from(receiptNumbersSelect.selectedOptions).map(option => option.value);
        const selectedResourceIds= Array.from(resourcesSelect.selectedOptions).map(option => option.value);
        const selectedUnitIds = Array.from(unitsSelect.selectedOptions).map(option => option.value);
        const data = {
            DateFrom : dateFrom, DateUntil: dateUntil, ReceiptNumbers: selectedReceiptNumbers,
            ResourceIds: selectedResourceIds, MeasurementUnitIds: selectedUnitIds
        };

        const response = await fetch('receipts/filter/get-json',
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

        const responseData = await response.json();

        fillFilteredDocuments(responseData, infoWaitingDataBlock);
    });

    function fillFilteredDocuments(collectionData, infoWaitingBlock) {
        const table = document.createElement('table');
        table.id = 'receipt-documents-table';

        const headerRow = document.createElement('tr');
        const headers = ['Номер', 'Дата', 'Ресурс', 'Единица измерения', 'Количество'];
        headers.forEach(headerText => {
            const th = document.createElement('th');
            th.innerText = headerText;
            headerRow.appendChild(th);
        });
        table.appendChild(headerRow);

        collectionData.forEach(receiptDocument => {
            if (receiptDocument.ReceiptResources.length === 0) {
                const tr = document.createElement('tr');

                const receiptNumberTd = document.createElement('td');
                receiptNumberTd.innerText = receiptDocument.ReceiptNumber;
                tr.appendChild(receiptNumberTd);

                const dateTd = document.createElement('td');
                dateTd.innerText = new Date(receiptDocument.ReceiptDate).toLocaleString();
                tr.appendChild(dateTd);

                const resourceTd = document.createElement('td');
                tr.appendChild(resourceTd);

                const unitTd = document.createElement('td');
                tr.appendChild(unitTd);

                const quantityTd = document.createElement('td');
                quantityTd.innerText = '0';
                tr.appendChild(quantityTd);

                table.appendChild(tr);
            } else {
                for (let i = 0; i < receiptDocument.ReceiptResources.length; i++) {
                    if (i === 0) {
                        const tr = document.createElement('tr');

                        const receiptNumberTd = document.createElement('td');
                        receiptNumberTd.innerText = receiptDocument.ReceiptNumber;
                        receiptNumberTd.rowSpan = receiptDocument.ReceiptResources.length;
                        tr.appendChild(receiptNumberTd);

                        const receiptDateTd = document.createElement('td');
                        receiptDateTd.innerText = new Date(receiptDocument.ReceiptDate).toLocaleString();
                        receiptDateTd.rowSpan = receiptDocument.ReceiptResources.length;
                        tr.appendChild(receiptDateTd);

                        const resourceNameTd = document.createElement('td');
                        resourceNameTd.innerText = receiptDocument.ReceiptResources[i].Resource.Name;
                        tr.appendChild(resourceNameTd);

                        const unitNameTd = document.createElement('td');
                        unitNameTd.innerText = receiptDocument.ReceiptResources[i].MeasurementUnit.Name;
                        tr.appendChild(unitNameTd);

                        const quantityTd = document.createElement('td');
                        quantityTd.innerText = receiptDocument.ReceiptResources[i].Quantity;
                        tr.appendChild(quantityTd);

                        table.appendChild(tr);
                    } else {
                        const tr = document.createElement('tr');

                        const resourceNameTd = document.createElement('td');
                        resourceNameTd.innerText = receiptDocument.ReceiptResources[i].Resource.Name;
                        tr.appendChild(resourceNameTd);

                        const unitNameTd = document.createElement('td');
                        unitNameTd.innerText = receiptDocument.ReceiptResources[i].MeasurementUnit.Name;
                        tr.appendChild(unitNameTd);

                        const quantityTd = document.createElement('td');
                        quantityTd.innerText = receiptDocument.ReceiptResources[i].Quantity;
                        tr.appendChild(quantityTd);

                        table.appendChild(tr);
                    }
                }
            }
        });

        infoWaitingBlock.remove();
        document.body.appendChild(table);
    }
</script>