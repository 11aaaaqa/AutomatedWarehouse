@model AutomatedWarehouse.MVC.Response_models.Resource.MeasurementUnitResponseModel
<link rel="stylesheet" href="~/css/general-styles.css"/>

<div style="margin-bottom: 35px;">
    <h2 style="margin-bottom: 15px;">Ресурс</h2>
    
    <div style="display: flex;">
        <button id="save-btn" class="button green-button" style="margin-right: 3px;">Сохранить</button>
        <button id="delete-btn" class="button red-button" style="margin-right: 3px;">Удалить</button>
        @if (Model.IsArchived)
        {
            <form method="post" asp-controller="MeasurementUnit" asp-action="SetIsArchived"
                  asp-route-measurementUnitId="@Model.Id" asp-route-isArchived="false">
                <input type="submit" value="В работу" class="button blue-button"/>
            </form>
        }
        else
        {
            <form method="post" asp-controller="MeasurementUnit" asp-action="SetIsArchived"
                  asp-route-measurementUnitId="@Model.Id" asp-route-isArchived="true">
                <input type="submit" value="В архив" class="button orange-button"/>
            </form>
        }
    </div>
</div>

<div id="error-block" class="error-block"></div>

<input id="unit-id-hidden-input" type="hidden" asp-for="Id"/>
<label for="update-unit-input">Наименование</label>
<input type="text" id="update-unit-input" value="@Model.Name" class="input"/>

<script src="~/js/show-error-message.js"></script>

<script>
    const unitId = document.getElementById('unit-id-hidden-input').value;
    const errorBlock = document.getElementById('error-block');

    document.getElementById('delete-btn').addEventListener('click', async function() {
        const response = await fetch(`/measurement-units/${unitId}/delete`,
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
        if (response.status === 409) {
            showErrorMessage(await response.text());
        }
        if(response.status === 500) {
            showErrorMessage('Что-то пошло не так, попробуйте позже');
        }
        if (response.redirected) {
            window.location.href = response.url;
        }
    });

    document.getElementById('save-btn').addEventListener('click', async function() {
        let unitName = document.getElementById('update-unit-input').value;
        if (unitName.trim().length > 0) {
            const response = await fetch(`/measurement-units/${unitId}/update?newName=${unitName}`,
                {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
            if (response.status === 409) {
                showErrorMessage(await response.text());
            }
            if(response.status === 500) {
                showErrorMessage('Что-то пошло не так, попробуйте позже');
            }
            if (response.redirected) {
                window.location.href = response.url;
            }
        } else {
            showErrorMessage('Наименование не может быть пустым');
        }
    });
</script>